package mil.dfas.persistence.jdbc.provider;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * Helper for creating database table
 */
public class DbUtils {

    Logger log = LoggerFactory.getLogger(DbUtils.class);

    DatabaseManager databaseManager;

    public static final String REQUESTS_TABLE_NAME = "REQUESTS";

    public static final String createAccountRequestTable = String.format("CREATE TABLE %s(" +
            "ID int generated by default as identity (start with 1) not null, " +
            "cn VARCHAR(256), " +
            "userprincipalname VARCHAR(256), " +
            "physicalDeliveryOfficeName VARCHAR(256), " +
            "userid VARCHAR(256), " +
            "givenName VARCHAR(256), " +
            "telephoneNumber VARCHAR(256), " +
            "mail VARCHAR(256), " +
            "displayName VARCHAR(256), " +
            "sn VARCHAR(256), " +
            "userCertificate VARCHAR(256), " +
            "comments VARCHAR(256), " +
            "processed SMALLINT DEFAULT 0, " +
            "activity_right VARCHAR(256), " +
            "locked SMALLINT DEFAULT 0, " +
            "lockedBy VARCHAR(256), " +
            "lockedById VARCHAR(256), " +
            "lockedDate DATE, "+
            "created_date DATE, "+
            "PRIMARY KEY (ID))", REQUESTS_TABLE_NAME);

    public static final String dropTable = "DROP TABLE %s";

    public DbUtils(DatabaseManager databaseManager) {

        this.databaseManager = databaseManager;

    }

    public void createTables(){

        createTable(REQUESTS_TABLE_NAME, createAccountRequestTable);

    }

    public void dropTables(){

        dropTable(REQUESTS_TABLE_NAME);

    }

    private Boolean dropTable(final String tableName){

        log.info("Dropping Table {}", tableName);

        return databaseManager.execute(new DatabaseCall<Boolean>() {
            @Override
            public Boolean withConnection(Connection connection) {
                try {
                    Statement statement = connection.createStatement();
                    return statement.execute(String.format(dropTable, tableName));

                } catch (SQLException e) {
                    log.debug("Unable to drop table", e);
                    return false;
                }
            }
        });
    }

    private Boolean createTable(final String name, final String sql) {

        log.info("Creating Table {}", name);

        return databaseManager.execute(new DatabaseCall<Boolean>() {
            @Override
            public Boolean withConnection(Connection connection) {
                try {
                    Statement statement = connection.createStatement();
                    return statement.execute(sql);
                } catch (SQLException e) {
                    log.debug("Unable to create table", e);
                    return false;
                }
            }
        });
    }
}
